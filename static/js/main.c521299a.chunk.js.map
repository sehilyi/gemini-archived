{"version":3,"sources":["editor/editor-panel.tsx","lib/higlass-model.ts","lib/higlass-lite-model.ts","lib/utils/index.ts","lib/higlass-lite.ts","editor/editor.tsx","serviceWorker.ts","index.tsx"],"names":["EditorPanel","props","templateCode","code","editor","useRef","useState","setCode","handleWidth","handleHeight","onResize","width","height","current","layout","language","value","theme","options","autoClosingBrackets","autoClosingQuotes","cursorBlinking","folding","lineNumbersMinChars","minimap","enabled","scrollBeyondLastLine","wordWrap","lineNumbers","renderLineHighlight","renderIndentGuides","onChange","e","editorDidMount","monacoEditor","monaco","console","log","focus","editorWillMount","HiGlassModel","hg","this","trackSourceServers","views","length","editable","chromInfoPath","indexOf","push","view","position","track","tracks","HiGlassLiteModel","ihl","hl","JSON","parse","stringify","v","w","h","x","y","generateReadableTrackUid","pre","n","hgToHlTrackType","t","p","parseServerAndTilesetUidFromUrl","url","includes","warn","server","undefined","tilesetUid","split","compile","setEditable","spec","config","setChromInfoPath","genomePositionSearchBoxVisible","searchBox","isSearchBoxObject","isObject","genomePositionSearchBox","chromInfoId","chromInfoServer","autocompleteId","autocompleteServer","visible","addNewView","uid","uniqueName","top","left","center","right","bottom","gallery","whole","initialXDomain","numTracks","tracksToAddLastly","xAxis","getLastView","type","addTrack","yAxis","data","addTrackSourceServers","forEach","validate","Ajv","extendRefs","HiGlassSchema","valid","errors","validateHG","Editor","hlOnlyHeatmap","setHl","className","defaultSize","debounce","bounded","pixelPreciseMarginPadding","containerPaddingX","containerPaddingY","sizeMode","viewConfig","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c521299a.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport MonacoEditor from 'react-monaco-editor';\nimport * as Monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport ReactResizeDetector from 'react-resize-detector';\n\nconst DEBUG_WITHOUT_DIAGNOSIS = true;\n\nfunction EditorPanel(props: {\n    code: string,\n    onChange: (code: string) => void\n}) {\n\n    const { code: templateCode } = props;\n    const editor = useRef<Monaco.editor.IStandaloneCodeEditor | null>(null);\n    const [code, setCode] = useState(templateCode);\n\n    function editorDidMount(monacoEditor: Monaco.editor.IStandaloneCodeEditor, monaco: typeof Monaco) {\n        console.log('editorDidMount', monacoEditor);\n        editor.current = monacoEditor;\n        monacoEditor.focus();\n    }\n\n    function setupDiagnostics() {\n        if (DEBUG_WITHOUT_DIAGNOSIS) return;\n        Monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n            allowComments: false,\n            enableSchemaRequest: true,\n            validate: true,\n            schemas: [{\n                uri: \"https://raw.githubusercontent.com/higlass/higlass/develop/app/schema.json\",\n                fileMatch: ['*']\n            }]\n        });\n        Monaco.languages.json.jsonDefaults.setModeConfiguration({\n            documentFormattingEdits: false,\n            documentRangeFormattingEdits: false,\n            completionItems: true,\n            hovers: true,\n            documentSymbols: true,\n            tokens: true,\n            colors: true,\n            foldingRanges: true,\n            diagnostics: true,\n        });\n    }\n\n    function onChangeHandle(code: string, e: any) {\n        setCode(code);\n        props.onChange(code);\n        // console.log('onChange', code, e);\n\n        setupDiagnostics();\n    }\n\n    function editorWillMount(monaco: typeof Monaco) {\n        setupDiagnostics();\n    }\n\n    return (\n        <>\n            <ReactResizeDetector\n                handleWidth\n                handleHeight\n                onResize={(width: number, height: number) => {\n                    editor?.current?.layout({ width, height });\n                }}\n            ></ReactResizeDetector>\n            <MonacoEditor\n                // Refer to https://github.com/react-monaco-editor/react-monaco-editor\n                language=\"json\"\n                value={code}\n                theme={\"test\"}\n                options={{\n                    autoClosingBrackets: \"never\",\n                    autoClosingQuotes: \"never\",\n                    cursorBlinking: \"smooth\",\n                    folding: true,\n                    lineNumbersMinChars: 4,\n                    minimap: { enabled: false },\n                    scrollBeyondLastLine: false,\n                    wordWrap: \"on\",\n                    lineNumbers: \"off\",\n                    renderLineHighlight: \"line\",\n                    renderIndentGuides: true\n                }}\n                onChange={onChangeHandle}\n                editorDidMount={editorDidMount}\n                editorWillMount={editorWillMount}\n            />\n        </>\n    );\n}\nexport default EditorPanel;","import { HiGlassSpec, View as HGView, Track as HGTrack } from \"./higlass.schema\";\nimport { View as HLView, TrackPosition } from \"./higlass-lite.schema\";\n\nexport class HiGlassModel {\n    private hg: HiGlassSpec;\n    constructor() {\n        this.hg = {};\n\n        // Add default specs.\n        this.hg.trackSourceServers = [];\n        this.hg.views = [];\n    }\n\n    public spec(): HiGlassSpec {\n        return this.hg;\n    }\n\n    public getLastView() {\n        return this.hg.views?.[this.hg.views?.length - 1];\n    }\n\n    public setEditable(editable: boolean | undefined) {\n        this.hg.editable = editable;\n        return this;\n    }\n\n    public setChromInfoPath(chromInfoPath: string | undefined) {\n        this.hg.chromInfoPath = chromInfoPath;\n        return this;\n    }\n\n    public addTrackSourceServers(trackSourceServers: string | undefined) {\n        if (trackSourceServers && this.hg.trackSourceServers?.indexOf(trackSourceServers) === -1)\n            this.hg.trackSourceServers?.push(trackSourceServers);\n        return this;\n    }\n\n    public addNewView(view: HGView) {\n        this.hg.views?.push(view);\n        return this;\n    }\n\n    public addTrack(position: TrackPosition, track: HGTrack) {\n        if (!this.hg.views) return this;\n        this.hg.views[this.hg.views.length - 1].tracks[position]?.push(track);\n        return this;\n    }\n}","import { HiGlassLiteSpec } from \"./higlass-lite.schema\";\n\nexport class HiGlassLiteModel {\n    private hl: HiGlassLiteSpec;\n    constructor(ihl: HiGlassLiteSpec) {\n        this.hl = JSON.parse(JSON.stringify(ihl));\n\n        // Add default specs.\n        for (let v = 0; v < this.hl.views.length; v++) {\n            if (!this.hl.views[v].w) this.hl.views[v].w = 12;\n            if (!this.hl.views[v].h) this.hl.views[v].h = 12;\n            if (!this.hl.views[v].x) this.hl.views[v].x = 0;\n            if (!this.hl.views[v].y) this.hl.views[v].y = 0;\n        }\n    }\n\n    public spec(): HiGlassLiteSpec {\n        return this.hl;\n    }\n}","import { TrackPosition, TrackType as HLTrackType } from \"../higlass-lite.schema\";\n\nexport const TRACK_LOCATIONS: TrackPosition[] = [\n    'top',\n    'left',\n    'right',\n    'bottom',\n    'center',\n    'whole',\n    'gallery'\n];\n\nexport function generateReadableTrackUid(pre: string | undefined, n: number) {\n    // TODO: Add track type\n    if (pre) return `${pre}-track-${n}`;\n    else return `track-${n}`;\n}\n\nexport function hgToHlTrackType(t: HLTrackType, p: TrackPosition) {\n    switch (t) {\n        case \"heatmap\":\n            return \"heatmap\";\n        case \"gene-annotation\":\n            if (p === \"left\" || p === \"right\") return \"vertical-gene-annotations\";\n            else return \"horizontal-gene-annotations\";\n        default:\n            return \"heatmap\";\n    }\n}\n\nexport function parseServerAndTilesetUidFromUrl(url: string) {\n    if (!url.includes(\"tileset_info/?d=\") || (\n        !url.includes(\"https:\") && !url.includes(\"http:\")\n    )) {\n        // TODO: Add RE to validate the format.\n        console.warn(\"Data url format is incorrect.\");\n        return { server: undefined, tilesetUid: undefined };\n    }\n\n    const pre = url.includes(\"https:\") ? \"https:\" : \"http:\";\n\n    const server = url.split(\"tileset_info/?d=\")[0].split(pre)[1];\n    const tilesetUid = url.split(\"tileset_info/?d=\")[1]\n    return { server, tilesetUid };\n}","import Ajv from 'ajv';\nimport HiGlassSchema from \"./higlass.schema.json\";\nimport { HiGlassLiteSpec, TrackPosition } from \"./higlass-lite.schema\";\nimport { HiGlassSpec, Track as HGTrack, GenomePositionSearchBox } from \"./higlass.schema\";\nimport { HiGlassModel } from './higlass-model';\nimport { HiGlassLiteModel } from './higlass-lite-model';\nimport { parseServerAndTilesetUidFromUrl, hgToHlTrackType, generateReadableTrackUid } from './utils';\nimport { isObject } from 'util';\n\n// TODO: Auto-generate readable uids.\n\nexport function compile(ihl: HiGlassLiteSpec): HiGlassSpec {\n\n    // TODO: Early return with invalidate specs.\n    // ...\n\n    const hl = new HiGlassLiteModel(ihl);\n    const hg = new HiGlassModel();\n\n    /**\n     * Top-level Configurations.\n     */\n    hg.setEditable(hl.spec().config?.editable)\n        .setChromInfoPath(hl.spec().config?.chromInfoPath);\n\n    // Genome Search Box\n    const genomePositionSearchBoxVisible = hl.spec().config?.searchBox !== undefined;\n    const isSearchBoxObject = isObject(hl.spec().config?.searchBox);\n    const genomePositionSearchBox: GenomePositionSearchBox = {\n        chromInfoId: isSearchBoxObject ?\n            (hl.spec().config?.searchBox as GenomePositionSearchBox)?.chromInfoId\n            : \"hg19\",\n        chromInfoServer: isSearchBoxObject ?\n            (hl.spec().config?.searchBox as GenomePositionSearchBox)?.chromInfoServer\n            : \"//higlass.io/api/v1\",\n        autocompleteId: (hl.spec().config?.searchBox as GenomePositionSearchBox)?.autocompleteId,\n        autocompleteServer: (hl.spec().config?.searchBox as GenomePositionSearchBox)?.autocompleteServer,\n        visible: genomePositionSearchBoxVisible\n    };\n\n    /**\n     * Views.\n     */\n    for (let v = 0; v < hl.spec().views.length; v++) {\n        const view = hl.spec().views[v];\n        /**\n         * View.\n         */\n        hg.addNewView({\n            uid: view.uniqueName ? view.uniqueName : `view-${v + 1}`,\n            genomePositionSearchBoxVisible,\n            genomePositionSearchBox,\n            layout: {\n                w: view.w as number,\n                h: view.h as number,\n                x: view.x as number,\n                y: view.y as number\n            },\n            tracks: {\n                top: [],\n                left: [],\n                center: [],\n                right: [],\n                bottom: [],\n                gallery: [],\n                whole: []\n            },\n            initialXDomain: [5.960464477539063e-8, 3100000000.0000005] // TODO: default value.\n        });\n\n        let numTracks = 1;\n        let tracksToAddLastly: { p: TrackPosition, t: HGTrack }[] = [];\n        for (let t = 0; t < view.tracks.length; t++) {\n            const track = view.tracks[t];\n            /**\n             * Axis on the top or left.\n             */\n            if (track.xAxis === true || track.xAxis === \"top\") {\n                const p = track.position === \"center\" ? \"top\" : track.position;\n                const t: HGTrack = {\n                    uid: track.uniqueName ? track.uniqueName : generateReadableTrackUid(hg.getLastView()?.uid, numTracks++),\n                    type: \"horizontal-chromosome-labels\",\n                    chromInfoPath: hl.spec().config?.chromInfoPath,\n                    height: 30\n                };\n                if (track.position === \"center\") tracksToAddLastly.push({ p, t });\n                else hg.addTrack(p, t);\n            }\n            if (track.yAxis === true || track.yAxis === \"left\") {\n                const p = track.position === \"center\" ? \"left\" : track.position;\n                const t: HGTrack = {\n                    uid: track.uniqueName ? track.uniqueName : generateReadableTrackUid(hg.getLastView()?.uid, numTracks++),\n                    type: \"vertical-chromosome-labels\",\n                    chromInfoPath: hl.spec().config?.chromInfoPath,\n                    width: 30\n                }\n                if (track.position === \"center\") tracksToAddLastly.push({ p, t });\n                else hg.addTrack(p, t);\n            }\n\n            /**\n             * Main track.\n             */\n            const { server, tilesetUid } = parseServerAndTilesetUidFromUrl(track.data);\n            hg.addTrack(track.position, {\n                uid: track.uniqueName ? track.uniqueName : generateReadableTrackUid(hg.getLastView()?.uid, numTracks++),\n                type: hgToHlTrackType(track.type, track.position),\n                server: server,\n                tilesetUid: tilesetUid,\n                width: track.width,\n                height: track.height\n            }).addTrackSourceServers(server);\n\n            /**\n             * Axis on the bottom or right.\n             */\n            if (track.xAxis === \"bottom\") {\n                const p = track.position === \"center\" ? \"bottom\" : track.position;\n                const t: HGTrack = {\n                    uid: track.uniqueName ? track.uniqueName : generateReadableTrackUid(hg.getLastView()?.uid, numTracks++),\n                    type: \"horizontal-chromosome-labels\",\n                    chromInfoPath: hl.spec().config?.chromInfoPath,\n                    height: 30\n                };\n                hg.addTrack(p, t);\n            }\n            if (track.yAxis === true || track.yAxis === \"right\") {\n                const p = track.position === \"center\" ? \"right\" : track.position;\n                const t: HGTrack = {\n                    uid: track.uniqueName ? track.uniqueName : generateReadableTrackUid(hg.getLastView()?.uid, numTracks++),\n                    type: \"vertical-chromosome-labels\",\n                    chromInfoPath: hl.spec().config?.chromInfoPath,\n                    width: 30\n                }\n                hg.addTrack(p, t);\n            }\n        }\n\n        // For axes that need to be added lastly.\n        tracksToAddLastly.forEach(({ p, t }) => hg.addTrack(p, t));\n    }\n\n    // TODO: Validate.\n    validateHG(hg.spec());\n\n    return hg.spec();\n}\n\nexport function validateHG(hg: HiGlassSpec): boolean {\n\n    const validate = new Ajv({ extendRefs: true }).compile(HiGlassSchema);\n    const valid = validate(hg);\n\n    if (validate.errors) {\n        console.warn(JSON.stringify(validate.errors, null, 2));\n    }\n\n    // TODO: check types such as default values and locationLocks\n\n    return valid as boolean;\n}","import React, { useState } from 'react';\nimport EditorPanel from './editor-panel';\nimport stringify from 'json-stringify-pretty-compact';\nimport SplitPane from 'react-split-pane';\nimport hlOnlyHeatmap from \"../lib/test/higlass-lite/hl-single-view.json\";\nimport { compile } from '../lib/higlass-lite';\n// @ts-ignore\nimport { HiGlassComponent } from 'higlass';\nimport './editor.css';\nimport { HiGlassLiteSpec } from '../lib/higlass-lite.schema';\nimport { debounce } from \"lodash\";\n\nconst DEBUG_DO_NOT_RENDER_HIGLASS = false;\n\nfunction Editor() {\n\n    const [hl, setHl] = useState(stringify(hlOnlyHeatmap));\n    const [hg, setHg] = useState(stringify(compile(hlOnlyHeatmap as HiGlassLiteSpec)));\n\n    return (\n        <div className=\"editor\">\n            <SplitPane split=\"vertical\" defaultSize=\"30%\" onChange={() => { }}>\n                <EditorPanel\n                    code={hl}\n                    onChange={debounce(hl => {\n                        setHl(hl);\n                        // setHg(stringify(compile(JSON.parse(hl) as HiGlassLiteSpec)));\n                    }, 2000)}\n                />\n                <SplitPane split=\"vertical\" defaultSize=\"50%\" onChange={() => { }}>\n                    <EditorPanel\n                        code={hg}\n                        onChange={(hg) => {\n                            // setHg(hg);\n                        }}\n                    />\n                    {!DEBUG_DO_NOT_RENDER_HIGLASS &&\n                        <HiGlassComponent\n                            options={{\n                                bounded: true,\n                                pixelPreciseMarginPadding: true,\n                                containerPaddingX: 0,\n                                containerPaddingY: 0,\n                                sizeMode: 'default'\n                            }}\n                            viewConfig={compile(hlOnlyHeatmap as HiGlassLiteSpec)}\n                        />}\n                </SplitPane>\n            </SplitPane>\n        </div>\n    );\n}\nexport default Editor;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Editor from './editor/editor';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Editor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}