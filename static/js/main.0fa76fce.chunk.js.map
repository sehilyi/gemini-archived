{"version":3,"sources":["editor/editor-panel.tsx","editor/examples.tsx","lib/test/gemini/gene-annotation-plot.ts","lib/test/gemini/cytogenetic-band.ts","lib/gemini.schema.ts","lib/models/track.ts","lib/utils/spec-preprocess.ts","lib/visualizations/glyph-preview.ts","lib/visualizations/glyph.ts","lib/utils/data-process.ts","lib/test/gemini/glyph/index.ts","lib/test/gemini/glyph/glyph-gene-annotation-plot.ts","lib/test/gemini/glyph/glyph-gene-annotation-plot-v2.ts","lib/test/gemini/glyph/glyph-cytogenetic-band.ts","lib/test/gemini/glyph/glyph-logo.ts","lib/utils/index.ts","editor/editor.tsx","serviceWorker.ts","index.tsx"],"names":["EditorPanel","props","templateCode","code","readOnly","editor","useRef","useState","setCode","useEffect","handleWidth","handleHeight","onResize","width","height","current","layout","language","value","theme","options","autoClosingBrackets","autoClosingQuotes","cursorBlinking","folding","lineNumbersMinChars","minimap","enabled","scrollBeyondLastLine","wordWrap","lineNumbers","renderLineHighlight","renderIndentGuides","onChange","e","editorDidMount","monacoEditor","monaco","console","log","focus","editorWillMount","demos","name","spec","tracks","data","mark","server","type","x","field","x1","y","text","geneOrExon","color","opacity","stroke","previewWidth","previewHeight","exonVersion","exonId","stain","domain","range","IsGlyphMark","IsChannelValue","channel","IsChannelBind","IsChannelDeep","TrackModel","track","channelToField","domains","scales","ranges","this","elements","longElements","forEach","element","bind","i","length","select","push","oneOf","deepToLongElements","setDomains","requiredChannels","c","targetChannel","map","d","Object","keys","d3","values","bb","y1","boundingBox","setRanges","datum","scaleChannel","getFieldByChannel","altSize","Math","abs","getEncoding","undefined","renderGlyphPreview","svg","selectAll","remove","WIDTH","HEIGHT","w","h","px","py","attr","g","append","renderBackground","tm","setScales","getElements","markE","filters","transformed_data","filteredData","slice","f","filter","indexOf","transformData","enter","style","styles","dashed","strokeWidth","dy","warn","renderGlyph","PADDING_X","PADDING_Y","PREDEFINED_GLYPHS","description","size","PREDEFINED_GLYPHS_TYPES","replaceGlyphs","predefinedGlyph","includes","find","Editor","glyphSvg","layoutSvg","demo","setDemo","editorMode","setEditorMode","stringify","gm","setGm","setPreviewWidth","setPreviewHeight","JSON","parse","editedGm","then","className","target","defaultValue","key","split","defaultSize","debounce","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0fa76fce.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport MonacoEditor from 'react-monaco-editor';\nimport * as Monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport ReactResizeDetector from 'react-resize-detector';\n\nconst DEBUG_WITHOUT_DIAGNOSIS = true;\n\nfunction EditorPanel(props: {\n    code: string,\n    readOnly?: boolean,\n    onChange?: (code: string) => void\n}) {\n\n    const { code: templateCode, readOnly } = props;\n    const editor = useRef<Monaco.editor.IStandaloneCodeEditor | null>(null);\n    const [code, setCode] = useState(templateCode);\n\n    useEffect(() => {\n        setCode(templateCode);\n    }, [templateCode]);\n\n    function editorDidMount(monacoEditor: Monaco.editor.IStandaloneCodeEditor, monaco: typeof Monaco) {\n        console.log('editorDidMount', monacoEditor);\n        editor.current = monacoEditor;\n        monacoEditor.focus();\n    }\n\n    function setupDiagnostics() {\n        if (DEBUG_WITHOUT_DIAGNOSIS) return;\n        Monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n            allowComments: false,\n            enableSchemaRequest: true,\n            validate: true,\n            schemas: [{\n                uri: \"https://raw.githubusercontent.com/higlass/higlass/develop/app/schema.json\",\n                fileMatch: ['*']\n            }]\n        });\n        Monaco.languages.json.jsonDefaults.setModeConfiguration({\n            documentFormattingEdits: false,\n            documentRangeFormattingEdits: false,\n            completionItems: true,\n            hovers: true,\n            documentSymbols: true,\n            tokens: true,\n            colors: true,\n            foldingRanges: true,\n            diagnostics: true,\n        });\n    }\n\n    function onChangeHandle(code: string, e: any) {\n        setCode(code);\n        if (props.onChange) props.onChange(code);\n        // console.log('onChange', code, e);\n\n        setupDiagnostics();\n    }\n\n    function editorWillMount(monaco: typeof Monaco) {\n        setupDiagnostics();\n    }\n\n    return (\n        <>\n            <ReactResizeDetector\n                handleWidth\n                handleHeight\n                onResize={(width: number, height: number) => {\n                    editor?.current?.layout({ width, height });\n                }}\n            ></ReactResizeDetector>\n            <MonacoEditor\n                // Refer to https://github.com/react-monaco-editor/react-monaco-editor\n                language=\"json\"\n                value={code}\n                theme={\"test\"}\n                options={{\n                    autoClosingBrackets: \"never\",\n                    autoClosingQuotes: \"never\",\n                    cursorBlinking: \"smooth\",\n                    folding: true,\n                    lineNumbersMinChars: 4,\n                    minimap: { enabled: false },\n                    scrollBeyondLastLine: false,\n                    wordWrap: \"on\",\n                    lineNumbers: \"off\",\n                    renderLineHighlight: \"line\",\n                    renderIndentGuides: true,\n                    readOnly\n                }}\n                onChange={onChangeHandle}\n                editorDidMount={editorDidMount}\n                editorWillMount={editorWillMount}\n            />\n        </>\n    );\n}\nexport default EditorPanel;","import { GENE_ANNOTATION_PLOT, GENE_ANNOTATION_PLOT_SIMPLE } from \"../lib/test/gemini/gene-annotation-plot\";\nimport { replaceGlyphs } from \"../lib/utils\";\nimport { CYTOGENETIC_BAND } from \"../lib/test/gemini/cytogenetic-band\";\n\nexport const demos = [\n    {\n        name: \"Gene Annotation Plot (Simple)\",\n        spec: GENE_ANNOTATION_PLOT_SIMPLE,\n        previewWidth: 300,\n        previewHeight: 300\n    },\n    {\n        name: \"Gene Annotation Plot\",\n        spec: GENE_ANNOTATION_PLOT,\n        previewWidth: 600,\n        previewHeight: 300\n    },\n    {\n        name: \"Cytogenetic Band\",\n        spec: CYTOGENETIC_BAND,\n        previewWidth: 900,\n        previewHeight: 300\n    }\n] as const;","import { GeminiSpec } from \"../../gemini.schema\";\n\nexport const GENE_ANNOTATION_PLOT_SIMPLE: GeminiSpec = {\n    tracks: [\n        {\n            data: \"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/Homo_sapiens.GRCh38.92.glyph.csv\",\n            mark: { server: \"gemini.v1\", type: \"glyph-gene-annotation-v2\" },\n            x: { field: \"start\", type: \"quantitative\" },\n            x1: { field: \"end\", type: \"quantitative\" },\n            y: { field: \"strand\", type: \"nominal\" },\n            text: { field: \"gene_name\", type: \"nominal\" },\n            geneOrExon: { field: \"feature\", type: \"nominal\" },\n            color: { value: \"#D1D28D\" },\n            opacity: { value: 0.7 },\n            stroke: { value: \"white\" }\n        }\n    ]\n};\n\nexport const GENE_ANNOTATION_PLOT: GeminiSpec = {\n    tracks: [\n        {\n            data: \"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/Homo_sapiens.GRCh38.92.glyph.csv\",\n            mark: { server: \"gemini.v1\", type: \"glyph-gene-annotation-v1\" },\n            x: { field: \"start\", type: \"quantitative\" },\n            x1: { field: \"end\", type: \"quantitative\" },\n            y: { field: \"strand\", type: \"nominal\" },\n            text: { field: \"gene_name\", type: \"nominal\" },\n            color: { field: \"strand\", type: \"nominal\" },\n            exonVersion: { field: \"exon_version\", type: \"nominal\" },\n            geneOrExon: { field: \"feature\", type: \"nominal\" },\n            exonId: { field: \"exon_id\", type: \"nominal\" },\n            opacity: { value: 0.9 }\n        }\n    ]\n};","import { GeminiSpec } from \"../../gemini.schema\";\n\nexport const CYTOGENETIC_BAND: GeminiSpec = {\n    tracks: [\n        {\n            data: \"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/chr1_cytogenetic_band.glyph.csv\",\n            mark: { server: \"gemini.v1\", type: \"cytogenetic-band-v1\" },\n            x: { field: \"Basepair_start\", type: \"quantitative\" },\n            x1: { field: \"Basepair_stop\", type: \"quantitative\" },\n            y: { field: \"Chr.\", type: \"nominal\" },\n            text: { field: \"Band\", type: \"nominal\" },\n            stain: { field: 'Stain', type: 'nominal' },\n            color: { field: \"Density\", type: \"nominal\", domain: ['', '25', '50', '75', '100'], range: ['white', '#D9D9D9', '#979797', '#636363', 'black'] }\n        }\n    ]\n};","// Refer to the following url for dealing with defaults:\n// https://github.com/vega/vega-lite/blob/23fe2b9c6a82551f321ccab751370ca48ae002c9/src/channeldef.ts#L961\n\nimport { PREDEFINED_GLYPHS_TYPE as PREDEFINED_GLYPH_TYPE } from \"./test/gemini/glyph\"\n\nexport interface GeminiSpec {\n    tracks: (Track | GenericType<Channel>)[] // TODO: `Track` does not mean anything here because of `GenericType`\n    // ...\n}\n\nexport interface GenericType<T> {\n    [k: string]: T\n}\n\n/**\n * Tracks\n */\nexport interface Track {\n    // primitives\n    data: string | Datum[]\n    mark: Mark\n    // channels\n    x?: Channel\n    y?: Channel\n    color?: Channel\n    opacity?: Channel\n    x1?: Channel\n    y1?: Channel\n    size?: Channel\n    text?: Channel\n    w?: Channel\n    h?: Channel\n    // styles\n    width?: number\n    height?: number\n}\n\n/**\n * Data\n */\nexport interface Datum {\n    [k: string]: number | string\n}\n\n/**\n * Channel\n */\nexport const ChannelTypes = {\n    x: 'x',\n    y: 'y',\n    x1: 'x1',\n    y1: 'y1',\n    color: 'color',\n    opacity: 'opacity',\n    size: 'size',\n    text: 'text',\n    w: 'w'\n} as const;\n\nexport type ChannelType = keyof typeof ChannelTypes | string\n\nexport type Channel = ChannelDeep | ChannelValue\n\nexport interface ChannelDeep {\n    field: string\n    type: \"nominal\" | \"quantitative\"\n    aggregate?: Aggregate\n    domain?: string[]\n    range?: string[]\n}\n\nexport interface ChannelValue {\n    value: number | string\n}\n\nexport type Aggregate = \"max\" | \"min\" | \"mean\"\n\n/**\n * Mark\n */\nexport type Mark = MarkType | MarkDeep\n\nexport type MarkType =\n    | \"bar\"\n    | \"point\"\n    | \"line\"\n    | \"rect\"\n    | \"text\"\n    | \"rule\"\n    | \"triangle-l\"\n    | \"triangle-r\"\n\n/**\n * Glyph\n */\nexport type MarkDeep = MarkGlyphPredefined | MarkGlyph\n\nexport interface MarkGlyphPredefined {\n    type: PREDEFINED_GLYPH_TYPE\n    server: string // TODO: Support this.\n}\n\nexport interface MarkGlyph {\n    type: \"glyph\"\n    name: string\n    referenceColumn?: string // reference column for selecting data tuples for each glyph\n    requiredChannels: ChannelType[] // channels that must be assigned\n    elements: GlyphElement[]\n}\n\nexport interface GlyphElement {\n    // primitives\n    description?: string\n    select?: { channel: ChannelType, oneOf: string[] }[]\n    mark: MarkType | MarkBind\n    // chennels\n    x?: ChannelBind | ChannelValue | 'none'\n    y?: ChannelBind | ChannelValue | 'none'\n    x1?: ChannelBind | ChannelValue | 'none'\n    y1?: ChannelBind | ChannelValue | 'none'\n    color?: ChannelBind | ChannelValue | 'none'\n    size?: ChannelBind | ChannelValue | 'none'\n    w?: ChannelBind | ChannelValue | 'none'\n    opacity?: ChannelBind | ChannelValue | 'none'\n    text?: ChannelBind | ChannelValue | 'none'\n    styles?: Style\n}\n\nexport interface Style {\n    dashed?: string\n    dy?: number\n    stroke?: string\n    strokeWidth?: number\n}\n\nexport interface MarkBind {\n    bind: string\n    domain: string[]\n    range: MarkType[]\n}\n\nexport interface ChannelBind {\n    bind: ChannelType\n    aggregate?: Aggregate\n}\n\nexport interface AnyGlyphChannels {\n    // Allow defining any kinds of chennels for binding data in Glyph\n    [key: string]: ChannelBind | ChannelValue\n}\n\n/**\n * Consistency\n */\ninterface Consistency {\n    /**\n     * `true` and `false` correspond to \"shared\" and \"independent\", respectively.\n     */\n    // List of `uniqueName` of `view` or `track` or indexes appear in the specification.\n    targets: string[] | number[]\n    // Default: The first element of `targets`.\n    reference?: string\n    color?: \"shared\" | \"independent\" | \"distinct\" | true | false\n    x?: \"shared\" | \"independent\" | true | false\n    y?: \"shared\" | \"independent\" | true | false\n    zoomScale?: \"shared\" | \"independent\" | true | false\n    zoomCenter?: \"shared\" | \"independent\" | true | false\n}\n\n/**\n * Type Checks\n */\nexport function IsGlyphMark(mark: any): mark is MarkGlyph {\n    // TODO: MarkType | MarkDeep\n    return typeof mark === \"object\" && mark.type === \"glyph\";\n}\n\nexport function IsChannelValue(\n    channel:\n        | ChannelDeep\n        | ChannelValue\n        | ChannelBind\n        | undefined\n        | 'none'\n): channel is ChannelValue {\n    return channel !== null && typeof channel === \"object\" && 'value' in channel;\n}\n\nexport function IsChannelBind(\n    channel:\n        | ChannelDeep\n        | ChannelValue\n        | ChannelBind\n        | undefined\n        | 'none'\n): channel is ChannelBind {\n    return channel !== null && typeof channel === \"object\" && 'bind' in channel;\n}\n\nexport function IsChannelDeep(channel: ChannelDeep | ChannelValue | undefined): channel is ChannelDeep {\n    return typeof channel === \"object\" && 'field' in channel;\n}","import { Track, Channel, MarkType, GenericType, IsGlyphMark, IsChannelValue, ChannelTypes, ChannelBind, MarkGlyph, IsChannelDeep, ChannelDeep, Datum, ChannelType, GlyphElement, IsChannelBind } from \"../gemini.schema\";\nimport { deepToLongElements } from \"../utils/spec-preprocess\";\nimport * as d3 from \"d3\";\nimport { BoundingBox } from \"../visualizations/bounding-box\";\n\nexport class TrackModel {\n    private track: Track | GenericType<Channel>;\n    private channelToField: { [k: string]: string };\n    private domains: { [channel: string]: (string | number)[] };\n    private scales: { [channel: string]: d3.ScaleLinear<any, any> | d3.ScaleOrdinal<any, any> | d3.ScaleSequential<any> };\n    private ranges: { [channel: string]: number[] | string[] };\n    constructor(track: Track | GenericType<Channel>) {\n        this.track = track;\n        this.domains = {};\n        this.channelToField = {};\n        this.scales = {};\n        this.ranges = {};\n\n        /**\n         * Validate\n         */\n        // TODO: Check if required channels are specified.\n        // ...\n\n        /**\n         * Default\n         */\n        if (IsGlyphMark(this.track.mark)) {\n            this.track.mark.elements = deepToLongElements(this.track.mark.elements);\n        }\n        // TODO: Add binds for not-specified channels.\n\n        /**\n         * Prepare Rendering\n         */\n        this.setDomains();\n    }\n    public getTrack() {\n        return this.track;\n    }\n\n    public getElements() {\n        if (IsGlyphMark(this.track.mark)) {\n            return this.track.mark.elements;\n        }\n        return [];\n    }\n\n    public getFieldByChannel(field: string) {\n        return this.channelToField[field];\n    }\n\n    private setDomains() {\n        const data = this.track.data as Datum[];\n\n        if (IsGlyphMark(this.track.mark)) {\n            const { requiredChannels: required } = this.track.mark;\n\n            // Add channel-to-domain mappings when `field` suggested.\n            required.forEach(c => {\n                const channel = (this.track as GenericType<Channel>)[c];\n                if (IsChannelDeep(channel)) {\n                    const { field } = channel;\n                    this.channelToField[c] = field;\n\n                    // Domains for x1 and y1 needs to be added to that of x and y, respectively.\n                    const targetChannel = c === 'x1' ? 'x' : c === 'y1' ? 'y' : c;\n\n                    if (!this.domains[targetChannel]) {\n                        this.domains[targetChannel] = [];\n                    }\n                    this.domains[targetChannel] = [\n                        ...this.domains[targetChannel],\n                        ...(channel.domain ? channel.domain : data.map(d => d[field]))\n                    ]\n                }\n            });\n            Object.keys(this.domains).forEach(c => {\n                const channel = (this.track as GenericType<Channel>)[c];\n                if (IsChannelDeep(channel)) {\n                    const { type } = channel;\n                    this.domains[c] = type === \"nominal\"\n                        ? d3.set(this.domains[c]).values()\n                        : d3.extent(this.domains[c].map(d => +d)) as [number, number]\n                }\n            });\n        }\n    }\n\n    private setRanges(bb: BoundingBox) {\n        Object.keys(this.domains).forEach(c => {\n            const channel = (this.track as GenericType<Channel>)[c];\n            if (IsChannelDeep(channel)) {\n                if (c === 'x') {\n                    this.ranges['x'] = [bb.x, bb.x1];\n                } else if (c === 'y') {\n                    this.ranges['y'] = [bb.y, bb.y1];\n                } else if (c === 'color') {\n                    this.ranges['color'] = channel.range ? channel.range : d3.schemeTableau10 as string[]\n                } else {\n                    // TODO: Support specifying `range` and `domain`.\n                    // ...\n                }\n            }\n        });\n    }\n\n    public setScales(boundingBox: BoundingBox) {\n        this.setRanges(boundingBox);\n        Object.keys(this.domains).forEach(c => {\n            const channel = (this.track as GenericType<Channel>)[c];\n            if (IsChannelDeep(channel)) {\n                const { type } = channel;\n                if (this.ranges[c]) {\n                    // TODO: simplify\n                    this.scales[c] = c === 'color' && type === 'nominal'\n                        ? d3.scaleOrdinal()\n                            .domain(this.domains[c] as string[])\n                            .range(this.ranges[c])\n                        : c === 'color' && type === 'quantitative'\n                            ? d3.scaleSequential(d3.interpolateBrBG)\n                                .domain(this.domains[c] as [number, number])\n                            : type === \"nominal\"\n                                ? d3.scaleOrdinal()\n                                    .domain(this.domains[c] as string[])\n                                    .range(this.ranges[c])\n                                : d3.scaleLinear()\n                                    .domain(this.domains[c] as [number, number])\n                                    .range(this.ranges[c] as [number, number]);\n                }\n            }\n        });\n    }\n\n    public getEncoding(\n        element: GlyphElement /* Remove this */,\n        c: keyof typeof ChannelTypes,\n        datum: Datum,\n        mark?: MarkType\n    ): any {\n        // TODO: Move out\n        const DEFAULT_ENCODING: { [k: string]: number | string } = {\n            'opacity': 1,\n            'size': 10,\n            'color': 'black',\n            'text': ''\n        }\n        ////\n\n        const scaleChannel = c === 'x1' ? 'x' : c === 'y1' ? 'y' : c;\n\n        if (IsChannelValue(element[c])) {\n            switch (c) {\n                case 'size':\n                case 'opacity':\n                case 'color':\n                case 'text':\n                    return (element[c] as any).value;\n            }\n        }\n        else if (IsChannelValue(this.track[c])) {\n            switch (c) {\n                case 'size':\n                case 'opacity':\n                case 'color':\n                case 'text':\n                    return (this.track[c] as any).value;\n            }\n        }\n        else if (this.scales[scaleChannel]) {\n            const field = IsChannelBind(element[c])\n                ? this.getFieldByChannel((element[c] as ChannelBind).bind)\n                : this.getFieldByChannel(c);\n            return this.scales[scaleChannel](datum[field] as any);\n        } else if (c === 'text') {\n            const field = IsChannelBind(element.text)\n                ? this.getFieldByChannel(element.text.bind)\n                : IsChannelDeep(this.track.text)\n                    ? this.track.text.field\n                    : undefined;\n            if (field) {\n                return datum[field];\n            }\n        }\n        else if (c === 'w') {\n            if (this.scales['x'] && IsChannelDeep(this.track.x) && IsChannelDeep(this.track.x1) && element.x !== 'none' && element.x1 !== 'none') {\n                const altSize = Math.abs((datum[this.getFieldByChannel('x1')] as number) - (datum[this.getFieldByChannel('x')] as number));\n                return this.scales['x'](altSize);\n            } else {\n                return this.getEncoding(element, 'size', datum);\n            }\n        }\n        else {\n            // If not specified, use default value.\n            return DEFAULT_ENCODING[c];\n        }\n    }\n\n    public getScale(c: ChannelType | string) {\n        return this.scales[c];\n    }\n}","import { GlyphElement } from \"../gemini.schema\";\n\n/**\n * Domains and ranges in conditional marks are moved into `select` option for the compiling simplicity.\n * @param elements \n */\nexport function deepToLongElements(elements: GlyphElement[]) {\n    const longElements: GlyphElement[] = [];\n    elements.forEach(element => {\n        if (typeof element.mark === \"object\") {\n            const { bind } = element.mark;\n            for (let i = 0; i < element.mark.domain.length; i++) {\n                const domain = element.mark.domain[i];\n                const range = element.mark.range[i];\n                const select = element.select ? element.select : [];\n                longElements.push({\n                    ...element,\n                    mark: range,\n                    select: [\n                        ...select,\n                        { channel: bind, oneOf: [domain] }\n                    ]\n                });\n            }\n        } else {\n            longElements.push(element);\n        }\n    });\n    return longElements;\n}","import { Track, GenericType, Channel } from \"../gemini.schema\";\nimport * as d3 from \"d3\";\nimport { renderGlyph } from \"./glyph\";\n\nexport function renderGlyphPreview(\n    svg: SVGSVGElement,\n    track: Track | GenericType<Channel>,\n    width: number,\n    height: number\n) {\n    if (!svg || !track) return;\n    d3.select(svg).selectAll(\"*\").remove();\n\n    // Styles\n    const WIDTH = width, HEIGHT = height, PADDING_X = 60, PADDING_Y = 100;\n\n    // BG and Guidelines\n    renderBackground(svg, WIDTH, HEIGHT, PADDING_X, PADDING_Y);\n\n    const innerG = d3.select(svg).append(\"g\")\n        .attr(\"width\", WIDTH - PADDING_X * 2)\n        .attr(\"height\", HEIGHT - PADDING_Y * 2)\n        .attr(\"transform\", `translate(${PADDING_X},${PADDING_Y})`);\n\n    // TODO: Select a subset of data tuples for a single glyph.\n    // ...\n\n    // TODO: Should data be aggregated when specified? (e.g., x: {..., aggregate: \"mean\"})\n    // ...\n\n    renderGlyph(\n        innerG,\n        track,\n        { x: 0, x1: WIDTH - PADDING_X * 2, y: 0, y1: HEIGHT - PADDING_Y * 2 }\n    );\n}\n\nfunction renderBackground(\n    svg: SVGGElement,\n    w: number,\n    h: number,\n    px: number,\n    py: number\n) {\n    d3.select(svg)\n        .attr(\"width\", w)\n        .attr(\"height\", h);\n    const g = d3.select(svg).append(\"g\");\n    g.append(\"rect\")\n        .attr(\"width\", w)\n        .attr(\"height\", h)\n        .attr(\"stroke\", \"lightgray\")\n        .attr(\"fill\", \"white\");\n    g.append(\"line\")\n        .attr(\"x1\", 0)\n        .attr(\"x2\", w)\n        .attr(\"y1\", py)\n        .attr(\"y2\", py)\n        .attr(\"class\", \"preview-guideline\");\n    g.append(\"line\")\n        .attr(\"x1\", 0)\n        .attr(\"x2\", w)\n        .attr(\"y1\", h - py)\n        .attr(\"y2\", h - py)\n        .attr(\"class\", \"preview-guideline\");\n    g.append(\"line\")\n        .attr(\"x1\", px)\n        .attr(\"x2\", px)\n        .attr(\"y1\", 0)\n        .attr(\"y2\", h)\n        .attr(\"class\", \"preview-guideline\");\n    g.append(\"line\")\n        .attr(\"x1\", w - px)\n        .attr(\"x2\", w - px)\n        .attr(\"y1\", 0)\n        .attr(\"y2\", h)\n        .attr(\"class\", \"preview-guideline\");\n    g.append(\"line\")\n        .attr(\"x1\", 0)\n        .attr(\"x2\", w)\n        .attr(\"y1\", h / 2)\n        .attr(\"y2\", h / 2)\n        .attr(\"class\", \"preview-guideline\");\n    g.append(\"line\")\n        .attr(\"x1\", w / 2)\n        .attr(\"x2\", w / 2)\n        .attr(\"y1\", 0)\n        .attr(\"y2\", h)\n        .attr(\"class\", \"preview-guideline\");\n}","import * as d3 from \"d3\";\nimport { BoundingBox } from \"./bounding-box\";\nimport { Track, Datum, ChannelDeep, GenericType, GlyphElement, ChannelBind, IsChannelDeep, Channel, MarkGlyph, IsGlyphMark, MarkDeep, ChannelValue, IsChannelValue } from \"../gemini.schema\";\nimport { transformData, FilterSpec } from \"../utils/data-process\";\nimport { DEFAULT_VISUAL_PROPERTIES } from \"./defaults\";\nimport { TrackModel } from \"../models/track\";\n\nexport function renderGlyph(\n    g: d3.Selection<SVGGElement, any, any, any>,\n    track: Track | GenericType<Channel>,\n    bb: BoundingBox\n) {\n    const tm = new TrackModel(track);\n    tm.setScales({\n        ...bb,\n        // TODO: Cheating here!\n        y: (bb.y1 - bb.y) / 2.0\n    });\n\n    // checks\n    const data = track.data as Datum[];\n    if (!data) {\n        console.warn(\"No array of a JSON object suggested.\");\n        return;\n    }\n\n    if (!IsGlyphMark(track.mark)) {\n        console.warn(\"Glyph is not defined.\");\n        return;\n    }\n    /////////////\n\n    // TODO: Add title using `name`\n    // ...\n\n    // Render each element\n    tm.getElements().forEach(element => {\n        const { select, mark: markE, } = element;\n\n        // Select\n        const filters: FilterSpec[] = [];\n        select?.forEach(d => {\n            const { channel, oneOf } = d;\n            if (tm.getFieldByChannel(channel)) {\n                filters.push({ field: tm.getFieldByChannel(channel), oneOf });\n            }\n        });\n\n        // Render glyph\n        const transformed_data = transformData(data, filters);\n        // TODO: Aggregation\n        if (markE === \"line\") {\n            g.selectAll()\n                .data(transformed_data)\n                .enter()\n                .append('line')\n                .attr('x1', d => tm.getEncoding(element, 'x', d))\n                .attr('x2', d => tm.getEncoding(element, 'x1', d))\n                .attr('y1', d => tm.getEncoding(element, 'y', d))\n                .attr('y2', d => tm.getEncoding(element, 'y', d))\n                .attr('stroke', d => tm.getEncoding(element, 'color', d))\n                .attr('stroke-width', d => tm.getEncoding(element, 'size', d))\n                .attr('opacity', d => tm.getEncoding(element, 'opacity', d))\n                .style('stroke-dasharray', (element.styles?.dashed ?? ''))\n        } else if (markE === 'point') {\n            g.selectAll('point')\n                .data(transformed_data)\n                .enter()\n                .append('circle')\n                .attr('fill', d => tm.getEncoding(element, 'color', d))\n                .attr('cx', d => tm.getEncoding(element, 'x', d))\n                .attr('cy', d => tm.getEncoding(element, 'x', d))\n                .attr('r', 15)\n                .attr('opacity', d => tm.getEncoding(element, 'opacity', d))\n        } else if (markE === \"rect\") {\n            g.selectAll()\n                .data(transformed_data)\n                .enter()\n                .append('rect')\n                .attr('x', d => tm.getEncoding(element, 'x', d))\n                .attr('y', d => tm.getEncoding(element, 'y', d) - tm.getEncoding(element, 'size', d) / 2.0)\n                .attr('width', d => tm.getEncoding(element, 'x1', d) - tm.getEncoding(element, 'x', d))\n                .attr('height', d => tm.getEncoding(element, 'size', d))\n                .attr('fill', d => tm.getEncoding(element, 'color', d))\n                .attr('opacity', d => tm.getEncoding(element, 'opacity', d))\n                .attr('stroke', element.styles?.stroke ?? '')\n                .attr('stroke-width', element.styles?.strokeWidth ?? '')\n        } else if (markE === 'text') {\n            g.selectAll()\n                .data(transformed_data)\n                .enter()\n                .append('text')\n                .text(d => tm.getEncoding(element, 'text', d))\n                .attr('x', d => (tm.getEncoding(element, 'x', d) + tm.getEncoding(element, 'x1', d)) / 2.0)\n                .attr('y', d => tm.getEncoding(element, 'y', d) + element.styles?.dy)\n                .attr('fill', d => tm.getEncoding(element, 'color', d))\n                .attr('font-size', d => tm.getEncoding(element, 'size', d))\n                .attr('alignment-baseline', \"top\")\n                .attr('text-anchor', \"middle\")\n                .attr('opacity', d => tm.getEncoding(element, 'opacity', d))\n        } else if (markE === 'rule') {\n            g.selectAll('rule')\n                .data(transformed_data)\n                .enter()\n                .append('line')\n                .attr('x1', d => tm.getEncoding(element, 'x', d))\n                .attr('x2', d => tm.getEncoding(element, 'x', d))\n                .attr('y1', d => tm.getEncoding(element, 'x', d) - tm.getEncoding(element, 'size', d) / 2.0)\n                .attr('y2', d => tm.getEncoding(element, 'x', d) - tm.getEncoding(element, 'size', d) / 2.0)\n                .attr('stroke', d => tm.getEncoding(element, 'color', d))\n                .attr('stroke-width', 3)\n                .attr('opacity', d => tm.getEncoding(element, 'opacity', d))\n        } else if (markE === 'triangle-r') {\n            g.selectAll('trangle-r')\n                .data(transformed_data)\n                .enter()\n                .append('path')\n                .attr('d', d => {\n                    const h = tm.getEncoding(element, 'size', d);\n                    const w = tm.getEncoding(element, 'w', d);\n                    const x = tm.getEncoding(element, 'x', d);\n                    const y = tm.getEncoding(element, 'y', d);\n                    return `M${x + w} ${y}`\n                        + `L${x} ${y + h / 2.0}`\n                        + `L${x} ${y - h / 2.0} Z`;\n                })\n                .attr('fill', d => tm.getEncoding(element, 'color', d))\n                .attr('opacity', d => tm.getEncoding(element, 'opacity', d))\n                .attr('stroke', element.styles?.stroke ?? '')\n                .attr('stroke-width', element.styles?.strokeWidth ?? '')\n        } else if (markE === 'triangle-l') {\n            g.selectAll('trangle-l')\n                .data(transformed_data)\n                .enter()\n                .append('path')\n                .attr('d', d => {\n                    const h = tm.getEncoding(element, 'size', d);\n                    const w = tm.getEncoding(element, 'w', d);\n                    const x = tm.getEncoding(element, 'x', d);\n                    const y = tm.getEncoding(element, 'y', d);\n                    return `M${x} ${y}`\n                        + `L${x + w} ${y + h / 2.0}`\n                        + `L${x + w} ${y - h / 2.0} Z`;\n                })\n                .attr('fill', d => tm.getEncoding(element, 'color', d))\n                .attr('opacity', d => tm.getEncoding(element, 'opacity', d))\n                .attr('stroke', element.styles?.stroke ?? '')\n                .attr('stroke-width', element.styles?.strokeWidth ?? '')\n        }\n    });\n}","import { Datum } from \"../gemini.schema\";\n\nexport interface FilterSpec {\n    field: string;\n    oneOf: string[];\n}\n\nexport function transformData(data: Datum[], filters: FilterSpec[]) {\n    let filteredData = data.slice();\n    filters.forEach(f => {\n        filteredData = filteredData.filter(d => f.oneOf.indexOf(d[f.field] as string) !== -1);\n    });\n    return filteredData;\n}","import { Mark } from '../../../gemini.schema';\n\nimport { GLYPH_GENE_ANNOTATAION } from './glyph-gene-annotation-plot';\nimport { GLYPH_LOGO } from './glyph-logo';\nimport { GLYPH_GENE_ANNOTATAION_V2 } from './glyph-gene-annotation-plot-v2';\nimport { GLYPH_CYTOGENETIC_BAND } from './glyph-cytogenetic-band';\n\nexport const PREDEFINED_GLYPHS: {\n    name: PREDEFINED_GLYPHS_TYPE,\n    mark: Mark\n}[] = [\n        {\n            name: 'glyph-gene-annotation-v1',\n            mark: GLYPH_GENE_ANNOTATAION\n        },\n        {\n            name: 'glyph-gene-annotation-v2',\n            mark: GLYPH_GENE_ANNOTATAION_V2\n        },\n        {\n            name: 'cytogenetic-band-v1',\n            mark: GLYPH_CYTOGENETIC_BAND\n        },\n        {\n            name: 'glyph-logo-plot-v1',\n            mark: GLYPH_LOGO\n        }\n    ];\n\nexport type PREDEFINED_GLYPHS_TYPE =\n    | 'glyph-gene-annotation-v1'\n    | 'glyph-gene-annotation-v2'\n    | 'cytogenetic-band-v1'\n    | 'glyph-logo-plot-v1'\n\nexport const PREDEFINED_GLYPHS_TYPES: PREDEFINED_GLYPHS_TYPE[] = [\n    'glyph-gene-annotation-v1',\n    'glyph-gene-annotation-v2',\n    'cytogenetic-band-v1',\n    'glyph-logo-plot-v1'\n];","import { MarkGlyph } from '../../../gemini.schema';\n\nexport const GLYPH_GENE_ANNOTATAION: MarkGlyph = {\n    type: 'glyph',\n    name: 'gene-annotation',\n    requiredChannels: [\n        // TODO: What about optional channels?\n        'x', 'x1',\n        'y', 'color', // + or - strand?\n        'geneOrExon', // genes or exons?\n        'exonId',\n        'exonVersion' // filtering by\n    ],\n    elements: [\n        {\n            // Should render once\n            description: 'horizontal line',\n            select: [\n                { channel: 'geneOrExon', oneOf: ['gene'] },\n            ],\n            mark: 'line',\n            color: { value: 'black' },\n            size: { value: 3 }\n        },\n        {\n            description: 'exon',\n            select: [\n                { channel: 'geneOrExon', oneOf: ['exon'] },\n                { channel: 'exonVersion', oneOf: ['2'] }\n            ],\n            mark: 'rect',\n            size: { value: 25 }\n        },\n        {\n            description: 'gene left',\n            select: [\n                { channel: 'geneOrExon', oneOf: ['gene'] },\n            ],\n            mark: {\n                bind: 'y',\n                domain: ['-', '+'],\n                range: ['triangle-l', 'rule']\n            },\n            size: { value: 25 },\n            x1: 'none'\n        },\n        {\n            description: 'gene right',\n            select: [\n                { channel: 'geneOrExon', oneOf: ['gene'] },\n            ],\n            mark: {\n                bind: 'y',\n                domain: ['-', '+'],\n                range: ['rule', 'triangle-r']\n            },\n            size: { value: 25 },\n            x: { bind: 'x1' },\n            x1: 'none'\n        },\n        {\n            mark: 'text',\n            select: [\n                { channel: 'geneOrExon', 'oneOf': ['gene'] }\n            ],\n            opacity: { value: 1 },\n            size: { value: 18 },\n            styles: {\n                dy: -20\n            }\n        },\n        {\n            mark: 'text',\n            select: [\n                { channel: 'geneOrExon', oneOf: ['exon'] },\n                { channel: 'exonVersion', oneOf: ['2'] }\n            ],\n            text: { bind: 'exonId' },\n            opacity: { value: 1 },\n            size: { value: 6 },\n            styles: {\n                dy: 28\n            }\n        }\n    ]\n}","import { MarkGlyph } from \"../../../gemini.schema\";\n\nexport const GLYPH_GENE_ANNOTATAION_V2: MarkGlyph = {\n    \"type\": \"glyph\",\n    \"name\": \"gene-annotation\",\n    \"requiredChannels\": [\n        // TODO: What about optional channels?\n        \"x\", \"x1\",\n        \"y\", 'color', // + or - strand?\n        \"geneOrExon\" // genes or exons?\n    ],\n    \"elements\": [\n        {\n            // Should render once\n            \"description\": \"gene\",\n            \"select\": [\n                { \"channel\": \"geneOrExon\", \"oneOf\": [\"gene\"] },\n            ],\n            \"mark\": \"rect\",\n            \"size\": { \"value\": 25 }\n        },\n        {\n            \"description\": \"gene head\",\n            \"select\": [\n                { \"channel\": \"geneOrExon\", \"oneOf\": [\"gene\"] },\n                { \"channel\": \"y\", \"oneOf\": [\"-\"] }\n            ],\n            \"mark\": \"triangle-l\",\n            \"size\": { \"value\": 25 },\n            \"x1\": 'none'\n        },\n        {\n            \"description\": \"gene right\",\n            \"select\": [\n                { \"channel\": \"geneOrExon\", \"oneOf\": [\"gene\"] },\n                { \"channel\": \"y\", \"oneOf\": [\"+\"] },\n            ],\n            \"mark\": \"triangle-r\",\n            \"size\": { \"value\": 25 },\n            \"x\": { \"bind\": \"x1\" },\n            \"x1\": 'none'\n        },\n        {\n            \"description\": \"horizontal line\",\n            \"select\": [\n                { \"channel\": \"geneOrExon\", \"oneOf\": [\"gene\"] },\n            ],\n            \"mark\": \"line\",\n            \"color\": { \"value\": \"gray\" },\n            \"size\": { \"value\": 2 },\n            'styles': {\n                dashed: \"3, 3\"\n            }\n        },\n        {\n            \"mark\": \"text\",\n            \"select\": [\n                { \"channel\": \"geneOrExon\", 'oneOf': [\"gene\"] }\n            ],\n            \"color\": { \"value\": \"black\" },\n            \"opacity\": { \"value\": 1 },\n            size: { value: 18 },\n            styles: {\n                dy: -20\n            }\n        }\n    ]\n}","import { MarkGlyph } from \"../../../gemini.schema\";\n\nexport const GLYPH_CYTOGENETIC_BAND: MarkGlyph = {\n    \"type\": \"glyph\",\n    \"name\": \"cytogenetic-band\",\n    \"requiredChannels\": [\n        // TODO: What about optional channels?\n        \"x\", \"x1\", // start, end\n        \"y\", // chr\n        'color', // strain\n        'text', // band\n        'stain' // gneg, gpos, gvar, or acen\n    ],\n    \"elements\": [\n        {\n            \"description\": \"acen bg\",\n            \"select\": [{ channel: 'text', oneOf: ['11', '11.1'] }],\n            \"mark\": { bind: 'text', domain: ['11', '11.1'], range: ['triangle-l', 'triangle-r'] },\n            'color': { value: '#6E7F8F' },\n            \"size\": { \"value\": 29 },\n            styles: {\n                stroke: 'black',\n                strokeWidth: 2\n            }\n        },\n        {\n            \"description\": \"symbols background\",\n            \"select\": [{ channel: 'stain', oneOf: ['gneg', 'gpos', 'gvar'] }],\n            \"mark\": \"rect\",\n            \"size\": { \"value\": 26 },\n            styles: {\n                stroke: 'black',\n                strokeWidth: 3\n            }\n        },\n        {\n            \"description\": \"symbols\",\n            \"select\": [{ channel: 'stain', oneOf: ['gneg', 'gpos', 'gvar'] }],\n            \"mark\": \"rect\",\n            \"size\": { \"value\": 25 }\n        },\n        {\n            \"description\": \"acen\",\n            \"select\": [{ channel: 'text', oneOf: ['11', '11.1'] }],\n            \"mark\": { bind: 'text', domain: ['11', '11.1'], range: ['triangle-l', 'triangle-r'] },\n            'color': { value: '#B40101' },\n            \"size\": { \"value\": 30 }\n        },\n        {\n            mark: 'text',\n            select: [{ channel: 'color', oneOf: ['100', '75', '50'] }],\n            color: { value: 'black' },\n            size: { value: 10 },\n            styles: {\n                dy: -20\n            }\n        }\n    ]\n}","import { Mark } from \"../../../gemini.schema\";\n\nexport const GLYPH_LOGO: Mark = {\n    \"type\": \"glyph\",\n    \"name\": \"logo\",\n    \"requiredChannels\": [\n        \"x\", \"x1\", \"y\"\n    ],\n    \"elements\": [\n        {\n            \"mark\": \"bar\"\n        },\n        {\n            \"mark\": \"text\",\n            \"color\": { \"value\": \"black\" }\n        }\n    ]\n}","import Ajv from 'ajv';\nimport uuid from \"uuid\";\nimport { GeminiSpec, Mark, MarkGlyphPredefined } from '../gemini.schema';\nimport { PREDEFINED_GLYPHS_TYPES, PREDEFINED_GLYPHS } from \"../test/gemini/glyph\";\n\nexport function replaceGlyphs(spec: GeminiSpec): GeminiSpec {\n    for (let i = 0; i < spec.tracks.length; i++) {\n        const track = spec.tracks[i];\n        const predefinedGlyph = (track.mark as MarkGlyphPredefined)?.type;\n        if (PREDEFINED_GLYPHS_TYPES.includes(predefinedGlyph)) {\n            track.mark = PREDEFINED_GLYPHS.find(d => d.name === predefinedGlyph)?.mark as Mark;\n        }\n    }\n    return spec;\n}\n\nexport function generateReadableTrackUid(pre: string | undefined, n: number) {\n    // TODO: Add track type\n\n    // TODO: This is to properly update higlass upon editor changes. Ultimately, remove this.\n    // (Refer to https://github.com/sehilyi/gemini/issues/7)\n    const id = uuid.v1();\n    if (pre) return `${pre}-track-${n}-(${id})`;\n    else return `track-${n}-${id}`;\n}\n\nexport function parseServerAndTilesetUidFromUrl(url: string) {\n    if (!url.includes(\"tileset_info/?d=\") || (\n        !url.includes(\"https:\") && !url.includes(\"http:\")\n    )) {\n        // TODO: Add RE to validate the format.\n        console.warn(\"Data url format is incorrect.\");\n        return { server: undefined, tilesetUid: undefined };\n    }\n\n    const pre = url.includes(\"https:\") ? \"https:\" : \"http:\";\n\n    const server = url.split(\"tileset_info/?d=\")[0].split(pre)[1];\n    const tilesetUid = url.split(\"tileset_info/?d=\")[1]\n    return { server, tilesetUid };\n}\n\nexport function validateHG(hg: any): boolean {\n\n    const validate = new Ajv({ extendRefs: true }).compile({ /*  */ });\n    const valid = validate(hg);\n\n    if (validate.errors) {\n        console.warn(JSON.stringify(validate.errors, null, 2));\n    }\n\n    // TODO: check types such as default values and locationLocks\n\n    return valid as boolean;\n}","import React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from \"d3\"; // TODO: performance\nimport EditorPanel from './editor-panel';\nimport stringify from 'json-stringify-pretty-compact';\nimport SplitPane from 'react-split-pane';\nimport { GeminiSpec, MarkDeep, Track, Datum } from '../lib/gemini.schema';\nimport { debounce } from \"lodash\";\nimport { demos } from './examples';\nimport './editor.css';\nimport { renderGlyphPreview } from '../lib/visualizations/glyph-preview';\nimport { replaceGlyphs } from '../lib/utils';\n\nconst DEBUG_INIT_DEMO_INDEX = 0;\n\nfunction Editor() {\n\n    const glyphSvg = useRef<SVGSVGElement>(null);\n    const layoutSvg = useRef<SVGSVGElement>(null);\n    const [demo, setDemo] = useState(demos[DEBUG_INIT_DEMO_INDEX]);\n    const [editorMode, setEditorMode] = useState<'Full Glyph Definition' | 'Predefined Glyph'>('Full Glyph Definition');\n    const [gm, setGm] = useState(stringify(demos[DEBUG_INIT_DEMO_INDEX].spec as GeminiSpec));\n    const [previewWidth, setPreviewWidth] = useState(demos[DEBUG_INIT_DEMO_INDEX].previewWidth);\n    const [previewHeight, setPreviewHeight] = useState(demos[DEBUG_INIT_DEMO_INDEX].previewHeight);\n\n    useEffect(() => {\n        if (editorMode === 'Full Glyph Definition') {\n            // TODO: Better copying?\n            setGm(stringify(replaceGlyphs(JSON.parse(stringify(demo.spec)) as GeminiSpec)));\n        } else {\n            setGm(stringify(demo.spec as GeminiSpec));\n        }\n        setPreviewWidth(demo.previewWidth);\n        setPreviewHeight(demo.previewHeight);\n    }, [demo, editorMode]);\n\n    useEffect(() => {\n        let editedGm;\n        try {\n            editedGm = replaceGlyphs(JSON.parse(gm));\n        } catch (e) {\n            console.warn(\"Cannnot parse the edited code.\");\n        }\n        if (!editedGm) return;\n\n        const track = (editedGm as GeminiSpec)?.tracks?.find(\n            d => (d.mark as MarkDeep)?.type === \"glyph\"\n        );\n        if (!track) return;\n\n        // TODO: Faster way of this?\n        // TODO: Move this inside of a model\n        d3.csv(track.data as string).then(data =>\n            renderGlyphPreview(\n                glyphSvg.current as SVGSVGElement,\n                { ...track, data } as Track,\n                previewWidth,\n                previewHeight\n            )\n        );\n    }, [gm, previewWidth, previewHeight]);\n\n    return (\n        <>\n            <div className=\"demo-navbar\">\n                🧬Gemini <code>Editor</code>\n                <select\n                    onChange={e => {\n                        setDemo(demos.find(d => d.name === e.target.value) as any);\n                    }}\n                    defaultValue={demo.name}>\n                    {demos.map(d => (\n                        <option key={d.name} value={d.name}>\n                            {d.name}\n                        </option>\n                    ))}\n                </select>\n                <select\n                    onChange={e => {\n                        setEditorMode(e.target.value as any);\n                    }}\n                    defaultValue={'Full Glyph Definition'}>\n                    {['Full Glyph Definition', 'Predefined Glyph'].map(d => (\n                        <option key={d} value={d}>\n                            {d}\n                        </option>\n                    ))}\n                </select>\n            </div>\n            <div className=\"editor\">\n                <SplitPane split=\"vertical\" defaultSize=\"50%\" onChange={() => { }}>\n                    {/* Gemini Editor */}\n                    <EditorPanel\n                        code={gm}\n                        readOnly={false}\n                        onChange={debounce(code => {\n                            setGm(code);\n                        }, 1000)}\n                    />\n                    {/* D3 Visualizations */}\n                    <SplitPane split=\"horizontal\" defaultSize=\"35%\" onChange={() => { }}>\n                        <div className=\"preview-container\">\n                            <b>Glyph Preview</b>\n                            <div><svg ref={glyphSvg} /></div>\n                        </div>\n                        <div className=\"preview-container\">\n                            <b>Layout Preview</b>\n                            <div><svg ref={layoutSvg} /></div>\n                        </div>\n                    </SplitPane>\n                </SplitPane>\n            </div>\n        </>\n    );\n}\nexport default Editor;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Editor from './editor/editor';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Editor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}