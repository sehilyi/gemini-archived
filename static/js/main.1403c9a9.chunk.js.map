{"version":3,"sources":["editor/editor-panel.tsx","editor/editor.tsx","serviceWorker.ts","index.tsx"],"names":["EditorPanel","props","templateCode","code","editor","useRef","useState","setCode","handleWidth","handleHeight","onResize","width","height","current","layout","language","value","theme","options","autoClosingBrackets","autoClosingQuotes","cursorBlinking","folding","lineNumbersMinChars","minimap","enabled","scrollBeyondLastLine","wordWrap","onChange","e","console","log","editorDidMount","monacoEditor","monaco","focus","Editor","className","split","defaultSize","stringify","data","encoding","mark","hl","HGSingleView","hg","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gjYAsDeA,MAjDf,SAAqBC,GAGjB,IAEWC,EAAgBD,EAAtBE,KACDC,EAASC,iBAAmD,MAHjE,EAIuBC,mBAASJ,GAJhC,mBAIMC,EAJN,KAIYI,EAJZ,KAiBD,OACE,oCACE,kBAAC,IAAD,CACEC,aAAW,EACXC,cAAY,EACZC,SAAU,SAACC,EAAeC,GAAoB,IAAD,EACrC,OAANR,QAAM,IAANA,GAAA,UAAAA,EAAQS,eAAR,SAAiBC,OAAO,CAACH,QAAOC,cAGpC,kBAAC,IAAD,CACEG,SAAS,OACTC,MAAOb,EACPc,MAAO,KACPC,QAAS,CACPC,oBAAqB,QACrBC,kBAAmB,QACnBC,eAAgB,SAChBC,SAAS,EACTC,oBAAqB,EACrBC,QAAS,CAACC,SAAS,GACnBC,sBAAsB,EACtBC,SAAU,MAEZC,SA5BN,SAAkBzB,EAAc0B,GAC9BtB,EAAQJ,GACR2B,QAAQC,IAAI,WAAY5B,EAAM0B,IA2B1BG,eAnCN,SAAwBC,EAAmDC,GACzEJ,QAAQC,IAAI,iBAAkBE,GAC9B7B,EAAOS,QAAUoB,EACjBA,EAAaE,a,gECiCFC,MAtCf,WAME,OACE,yBAAKC,UAAU,UACb,kBAAC,IAAD,CAAWC,MAAM,WAAWC,YAAY,MAAMX,SAAU,cACtD,kBAAC,EAAD,CACEzB,KAAMqC,IAAU,CAACC,KAAM,GAAIC,SAAU,CAAEC,KAAM,SAC7Cf,SAAU,SAACgB,OAIb,kBAAC,IAAD,CAAWN,MAAM,WAAWC,YAAY,MAAMX,SAAU,cACtD,kBAAC,EAAD,CACEzB,KAAMqC,IAAUK,GAChBjB,SAAU,SAACkB,QAIZ,MCtBSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.1403c9a9.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport MonacoEditor from 'react-monaco-editor';\nimport * as Monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport ReactResizeDetector from 'react-resize-detector';\n\nfunction EditorPanel(props: {\n  code: string,\n  onChange: (code: string) => void\n}) {\n\n  const {code: templateCode} = props;\n  const editor = useRef<Monaco.editor.IStandaloneCodeEditor | null>(null);\n  const [code, setCode] = useState(templateCode);\n\n  function editorDidMount(monacoEditor: Monaco.editor.IStandaloneCodeEditor, monaco: typeof Monaco) {\n    console.log('editorDidMount', monacoEditor);\n    editor.current = monacoEditor;\n    monacoEditor.focus();\n  }\n\n  function onChange(code: string, e: any) {\n    setCode(code);\n    console.log('onChange', code, e);\n  }\n  \n  return (\n    <>\n      <ReactResizeDetector\n        handleWidth\n        handleHeight\n        onResize={(width: number, height: number) => {\n          editor?.current?.layout({width, height});\n        }}\n      ></ReactResizeDetector>\n      <MonacoEditor\n        language=\"json\"\n        value={code}\n        theme={\"vs\"}\n        options={{\n          autoClosingBrackets: 'never',\n          autoClosingQuotes: 'never',\n          cursorBlinking: 'smooth',\n          folding: true,\n          lineNumbersMinChars: 4,\n          minimap: {enabled: false},\n          scrollBeyondLastLine: false,\n          wordWrap: 'on',\n        }}\n        onChange={onChange}\n        editorDidMount={editorDidMount}\n      />\n    </>\n  );\n}\nexport default EditorPanel;","import React from 'react';\nimport EditorPanel from './editor-panel';\nimport stringify from 'json-stringify-pretty-compact';\nimport SplitPane from 'react-split-pane';\nimport HGSingleView from \"../lib/test/higlass/single-view.json\";\nimport { validateHG } from '../lib/higlass-lite';\n// @ts-ignore\nimport { HiGlassComponent } from 'higlass';\nimport './editor.css';\n\nconst DEBUG_DO_NOT_RENDER_HIGLASS = true;\n\nfunction Editor() {\n\n  // DEBUG\n  if(false) validateHG(HGSingleView);\n  // \n  \n  return (\n    <div className=\"editor\">\n      <SplitPane split=\"vertical\" defaultSize=\"30%\" onChange={() => {}}>\n        <EditorPanel\n          code={stringify({data: \"\", encoding: { mark: \"bar\" }})}\n          onChange={(hl) => {\n            \n          }}\n        />\n        <SplitPane split=\"vertical\" defaultSize=\"50%\" onChange={() => {}}>\n          <EditorPanel\n            code={stringify(HGSingleView)}\n            onChange={(hg) => {\n            \n            }}\n          />\n          {!DEBUG_DO_NOT_RENDER_HIGLASS && \n            <HiGlassComponent\n              options={{\n                bounded: true,\n                pixelPreciseMarginPadding: true,\n                containerPaddingX: 0,\n                containerPaddingY: 0,\n                sizeMode: 'default'\n              }}\n              viewConfig={HGSingleView}\n            />}\n        </SplitPane>\n      </SplitPane>\n    </div>\n  );\n}\nexport default Editor;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Editor from './editor/editor';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Editor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}