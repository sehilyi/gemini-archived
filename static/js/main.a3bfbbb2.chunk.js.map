{"version":3,"sources":["editor/editor-panel.tsx","editor/editor.tsx","lib/higlass-lite.ts","serviceWorker.ts","index.tsx"],"names":["EditorPanel","props","Monaco","json","jsonDefaults","setDiagnosticsOptions","allowComments","enableSchemaRequest","validate","schemas","uri","templateCode","code","editor","useRef","useState","setCode","setupDiagnostics","defineTheme","base","inherit","rules","colors","fileMatch","setModeConfiguration","documentFormattingEdits","documentRangeFormattingEdits","completionItems","hovers","documentSymbols","tokens","foldingRanges","diagnostics","handleWidth","handleHeight","onResize","width","height","current","layout","language","value","theme","options","autoClosingBrackets","autoClosingQuotes","cursorBlinking","folding","lineNumbersMinChars","minimap","enabled","scrollBeyondLastLine","wordWrap","lineNumbers","renderLineHighlight","renderIndentGuides","onChange","e","console","log","editorDidMount","monacoEditor","monaco","focus","editorWillMount","Editor","className","split","defaultSize","stringify","data","encoding","mark","hl","hgOnlyHeatmap","hg","spec","Ajv","extendRefs","compile","HiGlassSchema","valid","errors","warn","JSON","validateHG","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uwUAmHeA,MA7Gf,SAAqBC,GAKnBC,YAAiBC,KAAKC,aAAaC,sBAAsB,CACvDC,eAAe,EACfC,qBAAqB,EACrBC,UAAU,EACVC,QAAS,CAAC,CAAEC,IAAK,gFANlB,IASaC,EAAiBV,EAAvBW,KACFC,EAASC,iBAAmD,MAVjE,EAWuBC,mBAASJ,GAXhC,mBAWMC,EAXN,KAWYI,EAXZ,KAmBD,SAASC,IACPf,SAAcgB,YAAY,OAAQ,CAChCC,KAAM,KACNC,SAAS,EACTC,MAAO,CACL,CACE,WAAc,SACd,MAAS,WAGbC,OAAQ,CACN,oBAAqB,UACrB,oBAAqB,UACrB,6BAA8B,UAC9B,iCAAkC,YAClC,0BAA2B,UAC3B,8BAA+B,aAGnCpB,YAAiBC,KAAKC,aAAaC,sBAAsB,CACvDC,eAAe,EACfC,qBAAqB,EACrBC,UAAU,EACVC,QAAS,CAAC,CACRC,IAAK,4EACLa,UAAW,CAAC,SAGhBrB,YAAiBC,KAAKC,aAAaoB,qBAAqB,CACtDC,yBAAyB,EACzBC,8BAA8B,EAC9BC,iBAAiB,EACjBC,QAAQ,EACRC,iBAAiB,EACjBC,QAAQ,EACRR,QAAQ,EACRS,eAAe,EACfC,aAAa,IAgBjB,OACE,oCACE,kBAAC,IAAD,CACEC,aAAW,EACXC,cAAY,EACZC,SAAU,SAACC,EAAeC,GAAoB,IAAD,EACrC,OAANxB,QAAM,IAANA,GAAA,UAAAA,EAAQyB,eAAR,SAAiBC,OAAO,CAAEH,QAAOC,cAGrC,kBAAC,IAAD,CAEEG,SAAS,OACTC,MAAO7B,EACP8B,MAAO,OACPC,QAAS,CACPC,oBAAqB,QACrBC,kBAAmB,QACnBC,eAAgB,SAChBC,SAAS,EACTC,oBAAqB,EACrBC,QAAS,CAAEC,SAAS,GACpBC,sBAAsB,EACtBC,SAAU,KACVC,YAAa,MACbC,oBAAqB,OACrBC,oBAAoB,GAEtBC,SAvCN,SAAwB5C,EAAc6C,GACpCzC,EAAQJ,GACRX,EAAMuD,SAAS5C,GACf8C,QAAQC,IAAI,WAAY/C,EAAM6C,GAE9BxC,KAmCI2C,eAvFN,SAAwBC,EAAmDC,GACzEJ,QAAQC,IAAI,iBAAkBE,GAC9BhD,EAAOyB,QAAUuB,EACjBA,EAAaE,SAqFTC,gBAjCN,SAAyBF,GACvB7C,S,6EC5BWgD,MAtCf,WAME,OACE,yBAAKC,UAAU,UACb,kBAAC,IAAD,CAAWC,MAAM,WAAWC,YAAY,MAAMZ,SAAU,cACtD,kBAAC,EAAD,CACE5C,KAAMyD,IAAU,CAAEC,KAAM,GAAIC,SAAU,CAAEC,KAAM,SAC9ChB,SAAU,SAACiB,OAIb,kBAAC,IAAD,CAAWN,MAAM,WAAWC,YAAY,MAAMZ,SAAU,cACtD,kBAAC,EAAD,CACE5C,KAAMyD,IAAUK,GAChBlB,SAAU,SAACmB,ICpBhB,SAAoBC,GAEzB,IAAMpE,EAAW,IAAIqE,IAAI,CAAEC,YAAY,IAAQC,QAAQC,GACjDC,EAAQzE,EAASoE,GAEnBpE,EAAS0E,QACXxB,QAAQyB,KAAKC,KAAKf,UAAU7D,EAAS0E,OAAQ,KAAM,IDezCG,CAAWV,OAGd,MEtBSW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.a3bfbbb2.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport MonacoEditor from 'react-monaco-editor';\nimport * as Monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport ReactResizeDetector from 'react-resize-detector';\nimport MonacoTheme from './editor-theme.json';\n\nfunction EditorPanel(props: {\n  code: string,\n  onChange: (code: string) => void\n}) {\n\n  Monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n    allowComments: false,\n    enableSchemaRequest: true,\n    validate: true,\n    schemas: [{ uri: \"https://raw.githubusercontent.com/higlass/higlass/develop/app/schema.json\" }]\n  });\n\n  const { code: templateCode } = props;\n  const editor = useRef<Monaco.editor.IStandaloneCodeEditor | null>(null);\n  const [code, setCode] = useState(templateCode);\n\n  function editorDidMount(monacoEditor: Monaco.editor.IStandaloneCodeEditor, monaco: typeof Monaco) {\n    console.log('editorDidMount', monacoEditor);\n    editor.current = monacoEditor;\n    monacoEditor.focus();\n  }\n\n  function setupDiagnostics() {\n    Monaco.editor.defineTheme(\"test\", {\n      base: \"vs\",\n      inherit: true,\n      rules: [\n        {\n          \"foreground\": \"000000\",\n          \"token\": \"string\"\n        },\n      ],\n      colors: {\n        \"editor.foreground\": \"#000000\",\n        \"editor.background\": \"#FFFFFF\",\n        \"editor.selectionBackground\": \"#B5D5FF\",\n        \"editor.lineHighlightBackground\": \"#00000012\",\n        \"editorCursor.foreground\": \"#000000\",\n        \"editorWhitespace.foreground\": \"#BFBFBF\"\n      }\n    })\n    Monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n      allowComments: false,\n      enableSchemaRequest: true,\n      validate: true,\n      schemas: [{\n        uri: \"https://raw.githubusercontent.com/higlass/higlass/develop/app/schema.json\",\n        fileMatch: ['*']\n      }]\n    });\n    Monaco.languages.json.jsonDefaults.setModeConfiguration({\n      documentFormattingEdits: false,\n      documentRangeFormattingEdits: false,\n      completionItems: true,\n      hovers: true,\n      documentSymbols: true,\n      tokens: true,\n      colors: true,\n      foldingRanges: true,\n      diagnostics: true,\n    });\n  }\n\n  function onChangeHandle(code: string, e: any) {\n    setCode(code);\n    props.onChange(code);\n    console.log('onChange', code, e);\n\n    setupDiagnostics();\n  }\n\n  function editorWillMount(monaco: typeof Monaco) {\n    setupDiagnostics();\n  }\n\n  return (\n    <>\n      <ReactResizeDetector\n        handleWidth\n        handleHeight\n        onResize={(width: number, height: number) => {\n          editor?.current?.layout({ width, height });\n        }}\n      ></ReactResizeDetector>\n      <MonacoEditor\n        // Refer to https://github.com/react-monaco-editor/react-monaco-editor\n        language=\"json\"\n        value={code}\n        theme={\"test\"}\n        options={{\n          autoClosingBrackets: \"never\",\n          autoClosingQuotes: \"never\",\n          cursorBlinking: \"smooth\",\n          folding: true,\n          lineNumbersMinChars: 4,\n          minimap: { enabled: false },\n          scrollBeyondLastLine: false,\n          wordWrap: \"on\",\n          lineNumbers: \"off\",\n          renderLineHighlight: \"line\",\n          renderIndentGuides: true\n        }}\n        onChange={onChangeHandle}\n        editorDidMount={editorDidMount}\n        editorWillMount={editorWillMount}\n      />\n    </>\n  );\n}\nexport default EditorPanel;","import React from 'react';\nimport EditorPanel from './editor-panel';\nimport stringify from 'json-stringify-pretty-compact';\nimport SplitPane from 'react-split-pane';\nimport hgOnlyHeatmap from \"../lib/test/higlass/only-heatmap.json\";\nimport { validateHG } from '../lib/higlass-lite';\n// @ts-ignore\nimport { HiGlassComponent } from 'higlass';\nimport './editor.css';\n\nconst DEBUG_DO_NOT_RENDER_HIGLASS = true;\n\nfunction Editor() {\n\n  // DEBUG\n  if (false) validateHG(hgOnlyHeatmap);\n  // \n\n  return (\n    <div className=\"editor\">\n      <SplitPane split=\"vertical\" defaultSize=\"30%\" onChange={() => { }}>\n        <EditorPanel\n          code={stringify({ data: \"\", encoding: { mark: \"bar\" } })}\n          onChange={(hl) => {\n\n          }}\n        />\n        <SplitPane split=\"vertical\" defaultSize=\"50%\" onChange={() => { }}>\n          <EditorPanel\n            code={stringify(hgOnlyHeatmap)}\n            onChange={(hg) => {\n              validateHG(hg);\n            }}\n          />\n          {!DEBUG_DO_NOT_RENDER_HIGLASS &&\n            <HiGlassComponent\n              options={{\n                bounded: true,\n                pixelPreciseMarginPadding: true,\n                containerPaddingX: 0,\n                containerPaddingY: 0,\n                sizeMode: 'default'\n              }}\n              viewConfig={hgOnlyHeatmap}\n            />}\n        </SplitPane>\n      </SplitPane>\n    </div>\n  );\n}\nexport default Editor;","import Ajv from 'ajv';\nimport { HiGlassLiteSpec } from \"./higlass-lite.schema\";\nimport { HiGlassSpec } from \"./higlass.schema\";\nimport HiGlassSchema from \"./higlass.schema.json\";\n\nexport function compile(spec: HiGlassLiteSpec): HiGlassSpec {\n\n  return spec;\n}\n\nexport function validateHG(spec: Object): boolean {\n\n  const validate = new Ajv({ extendRefs: true }).compile(HiGlassSchema);\n  const valid = validate(spec);\n\n  if (validate.errors) {\n    console.warn(JSON.stringify(validate.errors, null, 2));\n  }\n\n  // const hg = spec as HiGlassSpec;\n\n  // TODO: check types such as default values and locationLocks\n\n  return valid as boolean;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Editor from './editor/editor';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Editor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}